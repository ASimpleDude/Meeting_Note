# =========================================
# üß† Demo: ChromaDB QA kh√¥ng c·∫ßn AI
# =========================================
# C√†i tr∆∞·ªõc c√°c th∆∞ vi·ªán:
# pip install chromadb sentence-transformers

from chromadb import Client
from chromadb.config import Settings
from sentence_transformers import SentenceTransformer
import re

# ========================
# 1Ô∏è‚É£ Kh·ªüi t·∫°o database
# ========================
client = Client(Settings(persist_directory="./chroma_db"))
collection = client.get_or_create_collection("meeting_notes")

# ========================
# 2Ô∏è‚É£ Model embedding
# ========================
model = SentenceTransformer("keepitreal/vietnamese-sbert")

# ========================
# 3Ô∏è‚É£ D·ªØ li·ªáu meeting
# ========================
meeting_text = """
Scrum Master: Ch√†o m·ªçi ng∆∞·ªùi, ch√∫ng ta b·∫Øt ƒë·∫ßu daily nh√©. An, h√¥m qua em l√†m g√¨ v√† h√¥m nay k·∫ø ho·∫°ch ra sao?
An (Backend): H√¥m qua em ho√†n thi·ªán API login, h√¥m nay s·∫Ω l√†m ph·∫ßn x√°c th·ª±c token. Kh√¥ng c√≥ blocker.
Huy (Frontend): Em ƒëang l√†m giao di·ªán dashboard, c√≤n v√†i l·ªói hi·ªÉn th·ªã c·∫ßn fix. Blocker l√† ch∆∞a c√≥ d·ªØ li·ªáu th·∫≠t ƒë·ªÉ test.
Lan (Tester): B√™n QA m·ªõi test ƒë∆∞·ª£c ph·∫ßn ƒëƒÉng k√Ω, ƒëang ch·ªù build m·ªõi ƒë·ªÉ test ph·∫ßn login.
Scrum Master: Ok, Minh g·ª≠i d·ªØ li·ªáu cho Huy v√† build m·ªõi cho Lan nh√©. C·∫£m ∆°n m·ªçi ng∆∞·ªùi, k·∫øt th√∫c daily.
""".strip()

lines = [l.strip() for l in meeting_text.split("\n") if l.strip()]

# X√≥a d·ªØ li·ªáu c≈© (demo l·∫°i m·ªói l·∫ßn)
collection.delete(where={})

# Encode & n·∫°p v√†o Chroma
embeddings = model.encode(lines).tolist()
collection.add(
    documents=lines,
    embeddings=embeddings,
    ids=[f"line_{i}" for i in range(len(lines))]
)

print("‚úÖ ƒê√£ n·∫°p d·ªØ li·ªáu meeting v√†o ChromaDB.\n")

# ========================
# 4Ô∏è‚É£ H√†m t√¨m & tr·∫£ l·ªùi
# ========================
def find_answer(question: str):
    query_emb = model.encode([question]).tolist()
    results = collection.query(query_embeddings=query_emb, n_results=2)

    if not results["documents"]:
        return "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p."

    # L·∫•y ƒëo·∫°n vƒÉn g·∫ßn nghƒ©a nh·∫•t
    doc = results["documents"][0][0]

    # N·∫øu c√≥ d·∫°ng "T√™n (Role): ..." th√¨ t√°ch th√¥ng tin
    match = re.match(r"^([A-Zƒê√Ç√ä√î∆†∆Øa-zƒë√¢√™√¥∆°∆∞√Ä-·ªπ\s]+)\s*\((.*?)\):\s*(.*)$", doc)
    if match:
        name, role, content = match.groups()
        name = name.strip()
        role = role.strip()
        return f"{name} l√† {role.lower()}, {content}"
    else:
        return doc

# ========================
# 5Ô∏è‚É£ Demo h·ªèi ƒë√°p
# ========================
sample_questions = [
    "An l√† ai?",
    "An h√¥m nay l√†m g√¨?",
    "Blocker c·ªßa Huy l√† g√¨?",
    "Lan ƒëang l√†m g√¨?",
]

for q in sample_questions:
    print(f"‚ùì {q}")
    print("‚û°Ô∏è", find_answer(q))
    print()
